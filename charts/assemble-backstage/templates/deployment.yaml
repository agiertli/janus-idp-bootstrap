apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "assemble-backstage.fullname" . }}
  labels:
    {{- include "assemble-backstage.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "assemble-backstage.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "assemble-backstage.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "assemble-backstage.serviceAccountName" . }}
      containers:
{{- if .Values.oauth.enabled }}
        - name: {{ include "assemble-backstage.oauthProxy.name" . }}
          env:
            - name: OAUTH2_PROXY_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ include "assemble-backstage.oauthProxy.name" . }}
                  key: clientId
            - name: OAUTH2_PROXY_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "assemble-backstage.oauthProxy.name" . }}
                  key: clientSecret
            - name: OAUTH2_PROXY_COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "assemble-backstage.oauthProxy.name" . }}
                  key: cookieSecret
            - name: OAUTH2_PROXY_OIDC_ISSUER_URL
              value: "{{ .Values.oauth.issuerUrl }}"
          ports:
            - containerPort: {{ .Values.oauth.port }}
              protocol: TCP
          imagePullPolicy: {{ .Values.oauth.image.pullPolicy }}
          image: "{{ .Values.oauth.image.repository }}:{{ .Values.oauth.image.tag }}"
          args:
            - '--provider=oidc'
            - '--email-domain=*'
            - '--upstream=http://localhost:{{ .Values.backstage.port }}'
            - '--http-address=0.0.0.0:{{ .Values.oauth.port }}'
            - '--skip-provider-button'
{{- end }}
        - name: {{ .Chart.Name }}
{{- if .Values.securityContext }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
{{- end }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['node', 'packages/backend', '--config', '/config/app-config.yaml']   
          env:
{{- if .Values.postgres.storage.enabled }}
          - name: POSTGRES_ADMIN_PASSWORD  
            valueFrom:
              secretKeyRef:
                name: {{ include "assemble-backstage.postgresql.name" . }}
                key: databasePassword 
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: {{ include "assemble-backstage.fullname" . }}-postgresql
                key: databaseHost        
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: {{ include "assemble-backstage.fullname" . }}-postgresql
                key: databaseUser
          - name: POSTGRES_PORT
            valueFrom:
              secretKeyRef:
                name: {{ include "assemble-backstage.fullname" . }}-postgresql
                key: databasePort
{{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.backstage.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: assemble-config
              readOnly: true
              mountPath: /config
      volumes:
        - name: assemble-config
          secret:
            secretName: assemble-config
            defaultMode: 420

